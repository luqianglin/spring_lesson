<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        
        ">
        
    <context:component-scan base-package="cn.et.lession4.testm">
	<!-- spring默认扫描自带注解比如Controller Service... 如果不希望扫描排除它 
		<context:exclude-filter type="assignable" expression="cn.et.lession2.mvc.controller.MyController"/>
		type="assignable" 排除指定的类
		type="annotion" 表示排除某些带有指定注解的类
	
	-->	
	</context:component-scan> 
    <!-- 
    	bean来定义读取资源文件,context命名空间 读取资源文件
    	bean一般不用
    	<bean id="placeholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    		<property name="location" value="classpath:/cn/et/lession2/jdbc/jdbc.properties"></property>
    	</bean>
     --> 
 
    <context:property-placeholder location="classpath:/cn/et/lession4/jdbc/jdbc.properties"/>
	<!-- 数据源只是为了获取连接 
		${username}是某个关键字默认获取操作系统的用户名Administrator
		bean首先优先读取配置文件
		context优先读取操作系统
	-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
   		<property name="url" value="${url}"></property>
   		<property name="username" value="${username1}"></property>
   		<property name="password" value="${password}"></property>
   		<property name="driverClassName" value="${driverClass}"></property>
   </bean>
   <!-- 事务管理器  不在使用jdbc的commit和rollback 必须使用事务管理器提供 -->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<property name="dataSource" ref="dataSource"></property>
   </bean>
   <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
   		<property name="dataSource" ref="dataSource"></property>
   </bean>
   <!-- 定义通知 通知的代码spring已经实现 -->
   <tx:advice id="myAdvise" transaction-manager="transactionManager">
   		<tx:attributes>
   			<!-- 
	   	       propagation="REQUIRED" 方法和方法之间父子关系
	   	         REQUIRED 没有事务创建一个事务 有事务使用当前事务
	   	         REQUIRED_NEW 不管父方法是否存在事务 都会新建事务
	   	         SUPPORTS 父方法存在事务 使用当前事务  没有事务 使用jdbc的事务（自动提交）
	   	         NOT_SUPPORTED 不管父方法是否存在事务 都不会使用事务（挂起事务）
	   	         MANDATORY 必须在事务环境下运行 父方法没有事务 抛出异常
	   	           No existing transaction found for transaction marked with propagation 'mandatory'
	   	         NEVER 父方法不能存在 事务 有事务抛出异常   
	   	           Existing transaction found for transaction marked with propagation 'never'
	   	     -->
	   	    
   			<tx:method name="update*" propagation="REQUIRED"/>
   			<tx:method name="save*" propagation="NEVER"/>
   			<tx:method name="delete*"/>
   			<tx:method name="*" read-only="true"/>
   		</tx:attributes>
   
   </tx:advice>
   <aop:config>
   		<aop:pointcut expression="execution(* cn.*..*.testm.dao.*.*(..))" id="myPoint"/>
   		<aop:advisor advice-ref="myAdvise" pointcut-ref="myPoint"/>
   </aop:config>
</beans>